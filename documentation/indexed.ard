\import needs
\open Nat(*)

-- Exercise 1: Implement the function lookup, which takes a list xs and a natural number n and returns the n-th element in the list. The function should also take a proof that n is in the right range: T (n < length xs).

\func lookup {A : \Type} (n : Nat) (xs : List A) (p : T (n < length xs)) : A \elim n, xs
  | 0, cons x xs => x
  | suc n, cons x xs => lookup n xs p

-- Exercise 2: Implement function replicate for ‘vec’ and ‘Vec’ (this function creates the list of a given length filled with a given element).

\func replicate1 {A : \Type} (a : A) (n : Nat) : (vec A n) \elim n
  | 0 => ()
  | suc n => (a, replicate1 a n)

\func replicate2 {A : \Type} (a : A) (n : Nat) : (Vec A n) \elim n
  | 0 => fnil
  | suc n => a ::: replicate2 a n

-- Exercise 3: Implement function ‘map’ for ‘vec’ and ‘Vec’.

\func map1 {A B : \Type} {n : Nat} (f : A -> B) (xs : vec A n) : vec B n \elim n
  | 0 => ()
  | suc n => (f xs.1, map1 f xs.2)

\func map2 {A B : \Type} {n : Nat} (f : A -> B) (xs : Vec A n) : Vec B n \elim n, xs
  | 0, _ => fnil
  | suc n, fcons x xs => f x ::: map2 f xs

-- Exercise 4: Implement function ‘zipWith’ for ‘vec’ and ‘Vec’. The function must take lists of equal lengths.

\func zip1 {A B C : \Type} {n : Nat} (f : A -> B -> C) (xs : vec A n) (ys : vec B n) : vec C n \elim n
  | 0 => ()
  | suc n => (f xs.1 ys.1, zip1 f xs.2 ys.2)

\func zip2 {A B C : \Type} {n : Nat} (f : A -> B -> C) (xs : Vec A n) (ys : Vec B n) : Vec C n \elim n
  | 0 => fnil
  | suc n => \case xs, ys \with {
    | fcons x xs, fcons y ys => f x y ::: zip2 f xs ys
  }

-- Exercise 5: Functions Fin n -> A correspond to lists of length n with elements in A. Implement the function that converts an element of Fin n -> A to element of Vec A n.

\func toFin (n : Nat) : Fin (suc n)
  | 0 => fzero
  | suc n => fsuc (toFin n)

\func help {n : Nat} (f : Fin n) : Fin (suc n)
  | {suc n}, fzero => fzero
  | {suc n}, fsuc f => fsuc (help f)

\func push {A : \Type} {n : Nat} (a : A) (v : Vec A n) : Vec A (suc n) \elim n, v
  | 0, fnil => fcons a fnil
  | suc n, fcons aa v => fcons aa (push a v)

\func res (n : Nat) : Vec (Fin n) n
  | 0 => fnil
  | suc n => push (toFin n) (map2 help (res n))

-- Exercise 6: Define the type of matrices and a number of functions for them: the diagonal matrix, transpose, addition and multiplication of matrices.

\func Matrix (A : \Type) (a b : Nat) => Vec (Vec A a) b

\func diagonal {n : Nat} (v : Vec Nat n) : Matrix Nat n n
  | {0}, fnil => fnil
  | {suc n}, fcons a v =>
    \let
      | x => (::: nil) (diagonal v)
      | new => a :: replicate2 0 n
    \in new ::: x

\func transpose {A : \Type} {n m : Nat} (xss : Matrix A n m) : Matrix A m n \elim n, m, xss
  | 0, 0, fnil => fnil
  | 0, suc m, fcons a v => fnil
  | suc n, 0, fnil => replicate2 fnil (suc n)
  | suc n, suc m, fcons (fcons x xs) xss => (x ::: map Head xss) ::: (transpose (xs ::: map Tail xss))

\func \infixl 6 + {n m : Nat} (xss : Matrix Nat n m) (yss : Matrix Nat n m) : Matrix Nat n m
  | {_}, {0}, _, _ => fnil
  | {0}, {m}, _, _ => replicate2 fnil m
  | {suc n}, {suc m}, fcons xs xss, fcons ys yss => zip2 (Nat.+) xs ys ::: xss + yss

-- Exercise 7: Define the type CTree A n of (complete and full) binary trees of height precisely n, which store elements in internal nodes, but not in leaves. The height of a leaf is 0.
-- убрал в комментарий чтобы названия не менять
--\data CTree (A : \Type) (n : Nat) \elim n
--  | zero => leaf
--  | suc n => node A (CTree A n) (CTree A n)

-- Exercise 8: Define the type Tree A n of binary trees of height at most n, which store elements in internal nodes, but not in leaves. The height of a leaf is 0. Define the function that computes the height of a tree.

\data Tree (A : \Type) {n : Nat} (f : Fin n) \elim n, f
  | suc n, fzero => leaf
  | suc n, fsuc f => node A {lea : Fin n} (l : Tree A lea) {rf : Fin n} (r : Tree A rf)

\func max (l : Nat) (r : Nat) : Nat => if (l < r) r l

\func height {A : \Type} {n : Nat} {f : Fin n} (t : Tree A f): Nat \elim n, f, t
  | suc n, fzero, leaf => 0
  | suc n, fsuc f, node a l r => suc (max (height l) (height r))
