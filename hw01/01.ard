\func second (_ y _ : Nat) : Nat => y

\func apply (f : Nat -> Nat) (x : Nat) : Nat => f x

\func compose (f g : Nat -> Nat) (x : Nat) : Nat => f (g x)

\func flip (f : Nat -> Nat -> Nat) (x y : Nat) : Nat => f y x

\func second' : Nat -> Nat -> Nat => flip (second zero)
