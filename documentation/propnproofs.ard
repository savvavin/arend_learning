\import needs
\open Nat(*)

-- Exercise 1: Prove that (P -> Q -> R) -> (P -> Q) -> P -> R.
\func p1 {P Q R : \Type} : (P -> Q -> R) -> (P -> Q) -> P -> R =>
  \lam pqr pq p => pqr p (pq p)

-- Exercise 2: Prove that ((P -> Q -> R) -> P) -> (P -> R) -> R.
\func p2 {P Q R : \Type} : ((P -> Q -> R) -> P) -> (P -> R) -> R =>
  \lam pqrp pr => pr (pqrp (\lam p x => pr p))

-- Exercise 3: Prove that ((P && Q) -> R) -> P -> Q -> R.
\func p3 {P Q R : \Type} : ((P && Q) -> R) -> P -> Q -> R =>
  \lam pnqr p q => pnqr (p, q)

-- Exercise 4: Prove that (P -> Q -> R) -> (P && Q) -> R.
\func p4 {P Q R : \Type} : (P -> Q -> R) -> (P && Q) -> R =>
  \lam pqr pnq => pqr pnq.1 pnq.2

-- Exercise 5: Prove that (P -> R) -> (Q -> R) -> P || Q -> R.
\func p5 {P Q R : \Type} : (P -> R) -> (Q -> R) -> P || Q -> R => ||-elim

-- Exercise 6: Prove that ((P || Q) -> (P && Q)) -> ((P -> Q) && (Q -> P)).
\func p6 {P Q : \Type} : ((P || Q) -> (P && Q)) -> ((P -> Q) && (Q -> P)) =>
  \lam pxqpnq => (\lam p => (pxqpnq (inl p)).2, \lam q => (pxqpnq (inr q)).1)

-- Exercise 7: Russell’s paradox shows that there is no set of all sets. If such a set exists, then we can form the set B of sets which are not members of themselves. Then B belongs to itself if and only if it is not. This implies a contradiction. Cantor’s theorem states that there is no set X with a surjection from X onto the set of subsets of X. Its proof also constructs a proposition which is true if and only if it is false. Prove that more generally the existence of any such proposition implies a contradiction.
\func not (A : \Type) => A -> Empty

\func p7 {P : \Type} : (P -> not P) -> (not P -> P) -> Empty =>
  \lam pxp xpp =>
    \let
      | p : P => xpp (\lam p => pxp p p)
    \in pxp p p

-- Exercise 8: Prove that if, for every x : Nat, P x is true, then there exists x : Nat such that P x is true.
\func p8 (P : Nat -> \Type) (a : \Pi (x : Nat) -> P x) : \Sigma (x : Nat) (P x) =>
  (0, a 0)

-- Exercise 9: Prove that if there is no x : Nat such that P x holds, then P 3 is false.
\func p9 (P : Nat -> \Type) (a : not (\Sigma (x : Nat) (P x))) : not (P 3) =>
  \lam ppp => a (3, ppp)

-- Exercise 10: Prove that if, for every x : Nat, P x implies Q x, then the existence of an element x : Nat for which P x is true implies the existence of an element x : Nat for which Q x is true.
\func p10 (P Q : Nat -> \Type) (p : \Pi (x : Nat) -> (P x -> Q x)) (y : \Sigma (x : Nat) (P x)) : \Sigma (x : Nat) (Q x) => (y.1, p y.1 y.2)

-- Exercise 11: Prove that if, for every x : Nat, either P x is false or Q x is false, then P 3 implies that Q 3 is false.
\func absurd {A : \Type} (e : Empty) : A

\func help {P Q : \Type} : P -> (not P) || (not Q) -> not Q =>
  \lam p xpyxq => \case xpyxq \with {
    | inl xp => absurd (xp p)
    | inr xq => xq
  }

\func p11 (P Q : Nat -> \Type) (p : \Pi (x : Nat) -> not (P x) || not (Q x)) : (P 3) -> (not (Q 3)) =>
  \lam ppp => help ppp (p 3)

-- Exercise 12: Prove associativity of and and or.
\func \infix 5 and (x y : Bool) : Bool
  | true, true => true
  | _, _ => false

\func \infix 5 or (x y : Bool) : Bool
  | true, _ => true
  | _, true => true
  | _, _ => false

\func ass__and (x y z : Bool) : (x and y) and z = x and (y and z)
  | true, true, true => idp
  | true, true, false => idp
  | true, false, true => idp
  | true, false, false => idp
  | false, true, true => idp
  | false, true, false => idp
  | false, false, true => idp
  | false, false, false => idp

\func ass_or (x y z : Bool) : (x or y) or z = x or (y or z)
  | true, true, true => idp
  | true, true, false => idp
  | true, false, true => idp
  | true, false, false => idp
  | false, true, true => idp
  | false, true, false => idp
  | false, false, true => idp
  | false, false, false => idp

-- Exercise 13: Prove that 2 * 2 equals to 4.
\func p : 2 * 2 = 4 => idp
