\import needs

-- Exercise 6: Define the map function.

\func map {A B : \Type} (f : A -> B) (list : List A) : List B \elim list
  | nil => nil
  | cons x xs => cons (f x) (map f xs)

-- Exercise 7: Define the transpose function. It takes a list of lists considered as a matrix
-- and returns a list of lists which represents the transposed matrix.

\func help1 {A : \Type} (list : List (List A)) : List A
  | nil => nil
  | cons x xs => \case x \with {
    | nil => help1 xs
    | cons a b => a :: help1 xs
  }

\func help2 {A : \Type} (list : List (List A)) : List (List A)
  | nil => nil
  | cons x xs => \case x \with {
    | nil => help2 xs
    | cons a b => b :: help2 xs
  }

\func transpose' {A B : \Type} (list1 : List B) (list2 : List (List A)) : List (List A) \elim list1
  | nil => nil
  | cons a as => \case list2 \with {
    | nil => nil
    | cons nil xss => transpose' as xss
    | cons (cons x xs) xss => (x :: help1 xss) :: transpose' as (xs :: help2 xss)
  }

\func transpose {A : \Type} (list : List (List A)) => transpose' list list

-- check
\func lx : List (List Nat) => (1 :: 2 :: nil) :: (3 :: 4 :: nil) :: nil
\func ly : List (List Nat) => (1 :: 2 :: nil) :: (3 :: 4 :: nil) :: (5 :: 6 :: nil) :: nil
\func check : transpose lx = ((1 :: 3 :: nil) :: (2 :: 4 :: nil) :: nil) => idp
\func check' : transpose ly = ((1 :: 3 :: 5 :: nil) :: (2 :: 4 :: 6 :: nil) :: nil) => idp
\func a : List (List Nat) => ((1 :: 2 :: nil) :: nil)
\func b : List (List Nat) => ((1 :: nil) :: (2 :: nil) :: nil)
\func check'' : transpose a = b => idp
